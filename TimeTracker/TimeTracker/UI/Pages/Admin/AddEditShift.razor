@using UI.Data.DTOs;
@using UI.Services.Interfaces;

<div>
    <h3>@(CurrentShift.ShiftId == 0 ? "Add new shift" : "Edit Shift")</h3>
    @if (!string.IsNullOrEmpty(Message))
    {
        <p>@Message</p>
    }
    <label>Start Time UTC:</label><input type="datetime-local" @bind="CurrentShift.StartTime"/><br />
    <label>End Time UTC</label><input type="datetime-local" @bind="CurrentShift.EndTime" /><br />
    <button @onclick="SubmitForm">Save</button>
</div>

@code {
    [Parameter]
    public string ShiftUserId { get; set; }
    [Parameter]
    public Shift CurrentShift { get; set; }
    protected DateTime StartTime { get; set; } = DateTime.UtcNow;
    protected DateTime? EndTime { get; set; }
    protected string? Message { get; set; } = null;

    [Inject]
    private IShiftService ShiftService { get; set; }
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private string? UserId { get; set; }
    private async Task<string?> GetUserId()
    {
        if (string.IsNullOrWhiteSpace(UserId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                UserId = user.FindFirst(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
            }
        }

        return UserId;
    }

    protected async Task SubmitForm()
    {
        try
        {
            var add = CurrentShift.ShiftId == 0;
            CurrentShift.EditedByUser = await GetUserId();
            CurrentShift.EditedDate = DateTime.UtcNow;
            var saved = await ShiftService.AddInsertShift(CurrentShift);

            if (add)
            {
                Message = $"Added shift {saved.ShiftId}";
                CurrentShift = new() 
                {
                    UserId = ShiftUserId,
                    StartTime = DateTime.UtcNow
                };
            }
            else
            {
                Message = $"Saved shift";
            }
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            Message = "Could not add/edit shift";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        CurrentShift ??= new()
        {
            UserId = ShiftUserId,
            StartTime = DateTime.UtcNow
        };
    }

}
